// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NevermorePluginType string

const (
	NevermorePluginTypeGeneric             NevermorePluginType = "GENERIC"
	NevermorePluginTypeGame                NevermorePluginType = "GAME"
	NevermorePluginTypeNetworkConfigurator NevermorePluginType = "NETWORK_CONFIGURATOR"
)

var AllNevermorePluginType = []NevermorePluginType{
	NevermorePluginTypeGeneric,
	NevermorePluginTypeGame,
	NevermorePluginTypeNetworkConfigurator,
}

func (e NevermorePluginType) IsValid() bool {
	switch e {
	case NevermorePluginTypeGeneric, NevermorePluginTypeGame, NevermorePluginTypeNetworkConfigurator:
		return true
	}
	return false
}

func (e NevermorePluginType) String() string {
	return string(e)
}

func (e *NevermorePluginType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NevermorePluginType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NevermorePluginType", str)
	}
	return nil
}

func (e NevermorePluginType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
